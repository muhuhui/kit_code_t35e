//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : T3C_SLAVE
//  @ File Name : USSetThresholdCommand.cpp
//  @ Date : 2020-03-31
//  @ Author : XQ.Wang
//
//


#include "USSetThresholdCommand.h"
#include "Transaction/RadarManager.h"
#include "Transaction/Robot.h"

int USSetThresholdCommand::exec()
{
	static int m_generalThreshold = 0;
	int on_off = _paraJson["switch"].asInt();
	Robot *pRobot = Robot::getInstance();
	RadarManager* pRadar = RadarManager::getInstance();
	if(_exeRet != ST_SUCCESS && _exeRet != ST_FAIL){
		if (1 == on_off) { //Into the keypoint
			try	{
				m_generalThreshold = stoi(pRobot->m_pMySQLServer->getObstacleAlarmValue());
				printf("USSetThresholdCommand::exec(), get present threshold: %d\n", m_generalThreshold);
			} catch(...) {
				m_generalThreshold = 900;
				printf("USSetThresholdCommand::exec(), unexpected reading exception, threshold'll be set to %d\n", m_generalThreshold);
			}
			int setThreshold = _paraJson["threshold"].asInt();
			printf("USSetThresholdCommand::exec(), radar warning threshold set to %d\n", setThreshold);
			pRobot->m_pMySQLServer->setSettingParam(obstacle_alarm_distance, std::to_string(setThreshold), pRobot->m_nRobotID);
			pRadar->setWarnThreshold(setThreshold);
		} else { // Out of the keypoint
			//TODO: what if first out?
			//1000mm is the maximum range of radar and 100mm is the minimum
			//TODO: if range changed, ultrasonic driver should add interface for it.
			if (m_generalThreshold > 100 && m_generalThreshold < 1000) {
				printf("USSetThresholdCommand::exec(), radar warning threshold set to %d\n", m_generalThreshold);
				pRobot->m_pMySQLServer->setSettingParam(obstacle_alarm_distance, std::to_string(m_generalThreshold), pRobot->m_nRobotID);
				pRadar->setWarnThreshold(m_generalThreshold);
			}
			m_generalThreshold = 0;
		}
		_exeRet =ST_SUCCESS;
	}
	return _exeRet;
}

