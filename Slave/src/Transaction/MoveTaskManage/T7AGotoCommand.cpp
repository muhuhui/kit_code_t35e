//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : T3C_SLAVE
//  @ File Name : T7AGotoCommand.cpp
//  @ Date : 2019-06-27
//  @ Author : ShunWang
//
//


#include "Transaction/MoveTaskManage/T7AGotoCommand.h"
#include "Transaction/Motor.h"
#include "Driver/MyLog4CXX.h"
#include "Transaction/Robot.h"

const std::string LOG_TAG("root.T7AGotoCommand::");

int T7AGotoCommand::exec()
{
    auto logger = initLogger(LOG_TAG + std::string(__FUNCTION__));
	//解析JSON参数
    std::string posName = _paraJson["pos"].asString();
	int rotateEnable = _paraJson["rotateEnable"].asInt();
	Robot *pRobot = Robot::getInstance();
    Motor *pMotor = Motor::getInstance();
    Json::Value *sharedJson = getSharedParaJson();
    if(sharedJson == NULL) {
        printf("T7AGotoCommand::%s(), can't get json value!\n", __FUNCTION__);
        LOG4CPLUS_ERROR(logger, " can't get json value! ");
        setExeRet(ST_FAIL);
        return _exeRet;
    }
    (*sharedJson)[JSON_EXEC_RESULT] = ST_FAIL;

	if(_exeRet != ST_SUCCESS && _exeRet != ST_FAIL)
	{
	    switch(_exeStatus)
		{
			case T7AGOTO_ST_SNDCMD:
			{
/* 				if(rotateEnable) {
                    int presetNumber = 1;
					pRobot->m_pIndustrialCamera->presetOperation(GOTO_PRESET, presetNumber);
				} */
                int nRet = pMotor->goTo(0, posName);
                printf("T7AGotoCommand::%s(), go to %s, nRet: %d\n", __FUNCTION__, posName.c_str(), nRet);
	            LOG4CPLUS_INFO(logger, " go to " << posName << ", nRet: " << nRet);
				if(nRet == RET_SUCCESS) {
					_tryCnt = 0;
                    clearTimer();
	                _exeStatus = T7AGOTO_ST_WAITRESULT;
				}
				else {
	                if(_tryCnt <= 5) {
                        printf("T7AGotoCommand::%s(), go to %s failed, try again!\n", __FUNCTION__, posName.c_str());
	            		LOG4CPLUS_INFO(logger, " go to " << posName << " failed, try again!");
                        _tryCnt++;
					}
					else {
                        printf("T7AGotoCommand::%s(), go to %s failed, exit!\n", __FUNCTION__, posName.c_str());
						LOG4CPLUS_ERROR(logger, " go to " << posName << " failed, exit!");
						setExeRet(ST_FAIL); 
					}
				}
				break;
			}
			case T7AGOTO_ST_WAITRESULT:
			{
                if(0 != sleeepWaitTimeOut(10)) { break; }
				if(STOP_STATE == pMotor->getCurStatus()) //当前状态为停止
				{
                    (*sharedJson)[JSON_EXEC_RESULT] = ST_SUCCESS;
                    printf("T7AGotoCommand::%s(), go to %s succeeded!\n", __FUNCTION__, posName.c_str());
                    LOG4CPLUS_INFO(logger, " T7AGotoCommand succeeded to excute! " );
                    setExeRet(ST_SUCCESS);		
					_tryCnt = 0;
                    clearTimer();
				}
				break;
			}
			default:
			{
				break;
			}
			
		}
	}
	return _exeRet;
}

