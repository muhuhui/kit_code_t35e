//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : T3C_SLAVE
//  @ File Name : SetSpeedCommand.cpp
//  @ Date : 2019-06-25
//  @ Author : ShunWang
//
//


#include "CheckFDCommand.h"
#include "Driver/FireDoorDriver.h"
#include "Transaction/ConfigServer.h"
#include "Transaction/Motor.h"
#include "Transaction/WarningService.h"
#include "Transaction/MySQLServer.h"
#include <sys/time.h>

int CheckFDCommand::exec()
{
    FireDoorDriver* pFDDriver = FireDoorDriver::getInstance();
    ConfigServer* pConfigServer = ConfigServer::getInstance();
    Motor* pMotor = Motor::getInstance();
    WarningService* pWarningService = WarningService::getInstance();
    MySQLServer* pMySQLServer = MySQLServer::getInstance();
	int fdSwitch = _paraJson["switch"].asInt();
	int fireId = _paraJson["id"].asInt();
    if (!fdSwitch) {
        _exeRet = ST_SUCCESS;
        return _exeRet;
    }

	AlarmInfo vAlarmInfo;
    time_t timep;
    setenv("TZ","GMT-8",1);
    time(&timep);
    char tmp[128];
    strftime(tmp, sizeof(tmp), "%Y-%m-%d %H:%M:%S", localtime(&timep));
	vAlarmInfo.strAlarmTime = tmp;
	vAlarmInfo.dPosition = pMotor->getCurPosition();
	vAlarmInfo.nRobotID = pConfigServer->getRobotId();

	if(_exeRet != ST_SUCCESS && _exeRet != ST_FAIL)
	{
        pMotor->emergencyStop();
        sleep(1);
        //获取防火门ip
        std::string firedoorIp;
        int ret = pMySQLServer->getFireDoorIp(fireId, firedoorIp);
        if (ret != 0) {
            _exeRet = ST_FAIL;
            return _exeRet;
        }
        printf("CheckFDCommand::exec(), get firedoor ip: %s\n", firedoorIp.c_str());
        int tryCnt = 3;
        while (tryCnt--) {
            //获取防火门状态
            int nRet = pFDDriver->getCurStatus(firedoorIp);
            if (nRet == FD_OPENED) {
                _exeRet = ST_SUCCESS;
                return _exeRet;
            }
            vAlarmInfo.strItemName = "防火门告警";
            vAlarmInfo.strReason = "防火门自动打开失败，尝试再次打开...";
            pWarningService->insertAlarm(vAlarmInfo);
            printf("CheckFDCommand::exec(), firedoor is not opened!\n");
            //打开防火门
            nRet = pFDDriver->openFireDoor(firedoorIp);
            if(0 == nRet) {
                _exeRet = ST_SUCCESS;
                printf("CheckFDCommand::exec(), firedoor open success!\n");
            }
            else {
                vAlarmInfo.strItemName = "防火门告警";
                vAlarmInfo.strReason = "防火门再次打开失败！";
                pWarningService->insertAlarm(vAlarmInfo);
                _exeRet = ST_FAIL;
            }
        }
	}
	return _exeRet;
}

