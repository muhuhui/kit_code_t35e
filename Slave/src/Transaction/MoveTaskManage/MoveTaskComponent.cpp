//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : T3C_SLAVE
//  @ File Name : MoveTaskComponent.cpp
//  @ Date : 2019-06-25
//  @ Author : ShunWang
//
//


#include "MoveTaskComponent.h"
#include <exception>
#include "Driver/MyLog4CXX.h"
const std::string LOG_TAG("root.MoveTaskComponent::");
using namespace std;
 class UnsupportedOperationException : public exception
{
  const char * what() const throw()
  {
    return "Unsupported Operation Exception";
  }
};


void MoveTaskComponent::add(MoveTaskComponent *taskComponent) {
	
	throw new UnsupportedOperationException();
}

void MoveTaskComponent::remove(MoveTaskComponent *taskComponent) {

	printf("__FILE__ =%s, __LINE__=%d\n",__FILE__,__LINE__);
	std::string logname = LOG_TAG + std::string(__FUNCTION__);
	auto logger = initLogger(logname);
	LOG4CPLUS_INFO(logger, " tag=regular iterativeDelete remove");
	throw new UnsupportedOperationException();
}

MoveTaskComponent* MoveTaskComponent::findLeftMostChild() {

	throw new UnsupportedOperationException();
}

MoveTaskComponent::MoveTaskComponent()
{
    _paraJson[JSON_EXEC_ID] = -1;
    _paraJson[JSON_EXEC_RESULT] = 0;
}

void MoveTaskComponent::setParaJson(Json::Value& paraJson)
{
    _paraJson = paraJson;
}

Json::Value& MoveTaskComponent::getParaJson()
{
    return _paraJson;
}

void MoveTaskComponent::setParent(MoveTaskComponent *parent) 
{
	_parent = parent;

}

MoveTaskComponent* MoveTaskComponent::getParent() 
{
	return _parent;
}

void MoveTaskComponent::setCreateTime(time_t createTime)
{
	_createTime = createTime;
}
time_t MoveTaskComponent::getCreateTime()
{
	return _createTime;
}
long MoveTaskComponent::cacuSurvivalTime()
{
	time_t now = time(0);
	return now-_createTime;
}

void MoveTaskComponent::init()
{
	throw new UnsupportedOperationException();
}

int MoveTaskComponent::getChildSize()
{
	throw new UnsupportedOperationException();
}

MoveTaskComponent* MoveTaskComponent::getChild(int index)
{
	throw new UnsupportedOperationException();
}

void MoveTaskComponent::deleteDownDeep(MoveTaskComponent* component)
{
	if(component->getChildSize() > 0)
	{
		for(int i=0; i<component->getChildSize(); i++)
		{
			MoveTaskComponent* child = component->getChild(i);
			child->deleteDownDeep(child);
			child->remove(child);  //删除Item任务
			delete(child);  //释放Item内存
		}
	}
}

void MoveTaskComponent::clearNullParent(MoveTaskComponent* component) 
{
    MoveTaskComponent* parent = component->_parent;
    if(NULL != parent)
	{
		parent->remove(component);
        if(0 == parent->getChildSize())     //没有子节点，则删除该节点
		{
			parent->clearNullParent(parent);
		}
		delete component;
	}
}

void MoveTaskComponent::iterativeDelete(MoveTaskComponent* component) 
{
	std::string logname = LOG_TAG + std::string(__FUNCTION__);
	auto logger = initLogger(logname);
	LOG4CPLUS_INFO(logger, " tag=regular iterativeDelete start run1");
    component->deleteDownDeep(component);  //递归删除所有子节点
	LOG4CPLUS_INFO(logger, " tag=regular iterativeDelete start run2");
    component->clearNullParent(component); //递归删除所有为空的父节点
	LOG4CPLUS_INFO(logger, " tag=regular iterativeDelete start run3");
}
