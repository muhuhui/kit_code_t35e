//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : T3C_SLAVE
//  @ File Name : RFIDService.cpp
//  @ Date : 2019-07-03
//  @ Author : ShunWang
//
//


#include "Transaction/MoveTaskManage/PositionPlanService.h"
#include "Transaction/MoveTaskManage/PositionPlan.h"
#include<list>
#include "Driver/MySQLDriver.h"
#include<math.h>

int  PositionPlanService::queryPPById(int id, PositionPlan& pp){
  try{
    std::list<TuplePP> tuplePP;
	  MySQLDriver* mySQLDriver = MySQLDriver::getInstance();
    std::string sqlStr = Poco::format("SELECT * FROM position_plan WHERE id = %d;",id);
	  Session ses = mySQLDriver->getSession();
	if(ses.isConnected())
	{
      try {
          Statement statement(ses);
          statement << sqlStr, into(tuplePP), now;
      } catch(Poco::Exception& exc) {
          std::cerr << "PositionPlanService::queryPPById " << exc.displayText() << std::endl;
      }
    }
	  ses.close();
		if(tuplePP.size() > 0){
      std::list<TuplePP>::iterator iter;
      iter = tuplePP.begin();
      pp.setId(iter->get<0>());
      pp.setRobotId(iter->get<1>());
      pp.setName(iter->get<2>());
      pp.setFunctionId(iter->get<3>());
      pp.setPosition(iter->get<4>());
      pp.setGoActionId(iter->get<5>());
      pp.setGoActionParam(iter->get<6>());
      pp.setBackActionId(iter->get<7>());
      pp.setBackActionParam(iter->get<8>());
    }else{
      return -1;
    }
  }
  catch(Poco::Exception& exc){
      std::cerr << "PositionPlanService::queryPPById " << exc.displayText() << std::endl;
  }
  return 0;
}

// int  PositionPlanService::queryPPByPPNum(int ppNum, RFID& rfid)
// {
// 	try  
// 	{
//       std::list<TupleRFID> tupleRFID;
// 	  MySQLDriver* mySQLDriver = MySQLDriver::getInstance();
//       std::string sqlStr = Poco::format("SELECT * FROM rfid WHERE rfid_num = %d;",rfidNum);
// 	  Session ses = mySQLDriver->getSession();
// 	  if(ses.isConnected())
// 	  {
// 		Statement statement(ses);
// 		statement << sqlStr, into(tupleRFID), now;
// 		if(tupleRFID.size() > 0)
//         {
//             std::list<TupleRFID>::iterator iter;
//             for(iter = tupleRFID.begin();iter != tupleRFID.end();iter++)
//             {
//                 rfid.setId(iter->get<0>());
//                 rfid.setRfidNum(iter->get<1>());
//                 rfid.setRobotId(iter->get<2>());
//                 rfid.setName(iter->get<3>());
//                 rfid.setFunctionId(iter->get<4>());
//                 rfid.setPosition(iter->get<5>());
//                 rfid.setGoActionId(iter->get<6>());
//                 rfid.setGoActionParam(iter->get<7>());
//                 rfid.setBackActionId(iter->get<8>());
//                 rfid.setBackActionParam(iter->get<9>());
//             }
//            	return 0;
//         }
//         else
//         {
//         	return -1;
//         }
// 	  }
	  
	
// 	} catch(Poco::Exception& exc) {
	
// 	  std::cerr << "MySQLServer::getFireByID " << exc.displayText() << std::endl;
// 	}

// }

int PositionPlanService::queryPPByRobotPosition(int robotId, int position,PositionPlan& pp){
  int cnt = 0;
  try{
    std::list<TuplePP> tuplePP;
	  MySQLDriver* mySQLDriver = MySQLDriver::getInstance();
    std::string sqlStr = Poco::format("SELECT * FROM position_plan WHERE robot_id = %d AND position = %d;",robotId, position);
	  Session ses = mySQLDriver->getSession();
	  if(ses.isConnected()){
        try {
            Statement statement(ses);
            statement << sqlStr, into(tuplePP), now;
        } catch(Poco::Exception& exc) {
            std::cerr << "PositionPlanService::queryPPByRobotPosition " << exc.displayText() << std::endl;
        }
        std::list<TuplePP>::iterator iter = tuplePP.begin();
        cnt = tuplePP.size();
        if(cnt == 1){
            pp.setId(iter->get<0>());
            pp.setRobotId(iter->get<1>());
            pp.setName(iter->get<2>());
            pp.setFunctionId(iter->get<3>());
            pp.setPosition(iter->get<4>());
            pp.setGoActionId(iter->get<5>());
            pp.setGoActionParam(iter->get<6>());
            pp.setBackActionId(iter->get<7>());
            pp.setBackActionParam(iter->get<8>());
        }
    }
	ses.close();
  }catch(Poco::Exception& exc){
    std::cerr << "PositionPlanService::queryPPByRobotPosition " << exc.displayText() << std::endl;
  }
  return cnt;
}


int PositionPlanService::queryPPListByRobotId(int robotId, std::list<PositionPlan>& pp){
  try{
    PositionPlan pos;
    std::list<TuplePP> tuplePP;
	  MySQLDriver* mySQLDriver = MySQLDriver::getInstance();
    std::string sqlStr = Poco::format("SELECT * FROM position_plan WHERE robot_id = %d;",robotId);
	  Session ses = mySQLDriver->getSession();
	  if(ses.isConnected()){
        try {
            Statement statement(ses);
            statement << sqlStr, into(tuplePP), now;
        } catch(Poco::Exception& exc) {
            std::cerr << "PositionPlanService::queryPPListByRobotId " << exc.displayText() << std::endl;
        }
        std::list<TuplePP>::iterator iter;
        for(iter = tuplePP.begin();iter != tuplePP.end();iter++){
            pos.setId(iter->get<0>());
            pos.setRobotId(iter->get<1>());
            pos.setName(iter->get<2>());
            pos.setFunctionId(iter->get<3>());
            pos.setPosition(iter->get<4>());
            pos.setGoActionId(iter->get<5>());
            pos.setGoActionParam(iter->get<6>());
            pos.setBackActionId(iter->get<7>());
            pos.setBackActionParam(iter->get<8>());
            pp.push_back(pos);
        }
	  }
	  ses.close();
	} catch(Poco::Exception& exc) {
      std::cerr << "PositionPlanService::queryPPListByRobotId " << exc.displayText() << std::endl;
	}
	return 0;
}

int PositionPlanService::queryPPListByRobotMap(int robotId, int mapId, std::list<PositionPlan>& pp){
    int nRet = 0;
    try {
        PositionPlan pos;
        std::list<TuplePP> tuplePP;
        MySQLDriver* mySQLDriver = MySQLDriver::getInstance();
        std::string sqlStr = Poco::format("SELECT * FROM position_plan WHERE robot_id = %d AND map_id = %d;", robotId, mapId);
        Session ses = mySQLDriver->getSession();
        if(ses.isConnected()) {
            try {
                Statement statement(ses);
                statement << sqlStr, into(tuplePP), now;
            } catch(Poco::Exception& exc) {
                std::cerr << "PositionPlanService::queryPPListByRobotMap " << exc.displayText() << std::endl;
            }
            std::list<TuplePP>::iterator iter;
            for(iter = tuplePP.begin();iter != tuplePP.end();iter++) {
                pos.setId(iter->get<0>());
                pos.setRobotId(iter->get<1>());
                pos.setName(iter->get<2>());
                pos.setFunctionId(iter->get<3>());
                pos.setPosition(iter->get<4>());
                pos.setGoActionId(iter->get<5>());
                pos.setGoActionParam(iter->get<6>());
                pos.setBackActionId(iter->get<7>());
                pos.setBackActionParam(iter->get<8>());
                pp.push_back(pos);
            }
        }
        ses.close();
        nRet = 0;
    } catch(Poco::Exception& exc) {
        std::cerr << "PositionPlanService::queryPPListByRobotMap " << exc.displayText() << std::endl;
        nRet = -1;
    }
    return nRet;
}

void PositionPlanService::insertSelective(PositionPlan pp){
  try{
    const int interval = 100;
    PositionPlan tmp;
    int cnt = queryPPByRobotPosition(pp.getRobotId(), pp.getPosition(), tmp);
    if(abs(pp.getPosition()-tmp.getPosition()) > interval){
      std::cerr << "position setting is too close" << std::endl;
      return;
    }
    else if(cnt>=1){
      std::cerr << "cannot set on the same spot" << std::endl;
      return;
    }else{
      MySQLDriver* mySQLDriver = MySQLDriver::getInstance();
      std::string sqlStr = Poco::format("INSERT INTO position_plan (id,robot_id,name,function_id,position,go_action_id,go_action_param,back_action_id,back_action_param)  VALUES (%d,%d,%s,%d,%d,%d,%s,%d,%s);",
      pp.getId(), pp.getRobotId(),pp.getName(),pp.getFunctionId(),pp.getPosition(),pp.getGoActionId(),pp.getGoActionParam(),pp.getBackActionId(),pp.getBackActionParam());
      Session ses = mySQLDriver->getSession();
      if(ses.isConnected()){
        try {
            Statement statement(ses);
            statement << sqlStr, now;
        } catch(Poco::Exception& exc) {
            std::cerr << "PositionPlanService::insertSelective " << exc.displayText() << std::endl;
        }
      }
	  ses.close();
    }
  } 
  catch(Poco::Exception& exc)
  {
    std::cerr << "PositionPlanService::insertSelective " << exc.displayText() << std::endl;
  }	
}

void PositionPlanService::updatePositionPlan(PositionPlan pp){
  try{
    PositionPlan tmp;
    int cnt = queryPPByRobotPosition(pp.getRobotId(), pp.getPosition(), tmp);
    if(cnt == 1){
      MySQLDriver* mySQLDriver = MySQLDriver::getInstance();
      std::string sqlStr = Poco::format("UPDATE rfid SET id=%d, robot_id= %d,name=%s,function_id=%d,position=%d,go_action_id=%d,go_action_param=%s,back_action_id = %d,back_action_param = %s WHERE id = %d;",
      pp.getId(),pp.getRobotId(),pp.getName(),pp.getFunctionId(),pp.getPosition(),pp.getGoActionId() ,pp.getGoActionParam(),pp.getBackActionId(),pp.getBackActionParam(), pp.getId());
      Session ses = mySQLDriver->getSession();
      if(ses.isConnected()){
        try {
            Statement statement(ses);
            statement << sqlStr, now;
        } catch(Poco::Exception& exc) {
            std::cerr << "PositionPlanService::updatePositionPlan " << exc.displayText() << std::endl;
        }
      }
	 ses.close();

    }
  }catch(Poco::Exception& exc){
    std::cerr << "PositionPlanService::updatePositionPlan " << exc.displayText() << std::endl;
  }	
  
}

void PositionPlanService::deletePPById(int id){
    try{
        MySQLDriver* mySQLDriver = MySQLDriver::getInstance();
        std::string sqlStr = Poco::format("DELETE FROM rfid WHERE id= %d;",id);
        Session ses = mySQLDriver->getSession();
        if(ses.isConnected()){
            try {
                Statement statement(ses);
                statement << sqlStr, now;
            }catch(Poco::Exception& exc){
                std::cerr << "PositionPlanService::deletePPById " << exc.displayText() << std::endl;
            }
        }
        ses.close();

    }catch(Poco::Exception& exc){
        std::cerr << "PositionPlanService::deletePPById " << exc.displayText() << std::endl;
    }
}

void PositionPlanService::deletePPByRobotId(int robotId){
  try{
    MySQLDriver* mySQLDriver = MySQLDriver::getInstance();
	  std::string sqlStr = Poco::format("DELETE FROM rfid WHERE robot_id= %d;",robotId);
    Session ses = mySQLDriver->getSession();
	  if(ses.isConnected()){
        try {
          Statement statement(ses);
		  statement << sqlStr, now;
        } catch(Poco::Exception& exc) {
          std::cerr << "PositionPlanService::deletePPByRobotId " << exc.displayText() << std::endl;
        }
	  }
	  ses.close();
  }catch(Poco::Exception& exc){
    std::cerr << "PositionPlanService::deletePPByRobotId " << exc.displayText() << std::endl;
  }
}

