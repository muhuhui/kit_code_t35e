#include "ParseData.h"

/*
???????????
?õô?????????????????????????????????????
*/
bool cBuffer_Parse(CBuffer *pBuf)
{
	//??????????????????
	int index = 0;
	//????boundary????????
	char *boundary = "--boundary\r\n";
	int length = strlen(boundary);
	
	//???boundary??????
	char *buf = (char *)malloc(sizeof(char)*length);
	buf = cBuffer_Get(pBuf, index, length);

	//?§Ø???????boundary?????
	if (buf==NULL||strstr(buf, boundary) == NULL)
	{
		return false;
	}
	else
	{
		index += length;
		//???????????????????
		char *ContentT = "Content-Type: ";
		buf = (char *)malloc(sizeof(char)*SIZE);

		//???????????
		buf = cBuffer_Get(pBuf, index, SIZE);
		if (buf == NULL || strstr(buf, ContentT) == NULL)
		{
			return false;
		}

		//?????????
		index += length;

		//???????????????????????
		buf = cBuffer_Get(pBuf, index, SIZE);
		if (buf == NULL)
		{
			return false;
		}
		else
		{
			//?§Ø????????
			int type=0;
			//xml????
			if (strstr(buf, XML) != NULL)
			{
				type = xml;
			}
			//json????
			if (strstr(buf, JJSON)!=NULL)
			{
				type = jjson;
			}
			//????????????
			if (strstr(buf, IMG) != NULL)
			{
				type = img;
			}

			//??????????????????
			char* ContentL = "Content-Length: ";

			//??????????????????????
			buf = cBuffer_Get(pBuf, 0, SIZE);

			//?????Content-Length: ???????????????????
			char *p = strstr(buf, ContentL);
			int len = strlen(p);

			//???????????????????Content-Length: ?????????????????????????"Content-Length: "????????????????????????????????????????
			index = strlen(buf) - len+strlen(ContentL);
			//??????????????
			char *chLen=new char[16];
			memset(chLen, 0, 16);
			
			//??????????
			int i = 0;
			for (index; index < SIZE&&buf[index]!=END1; index++)
			{
				chLen[i] = buf[index];
				i++;
			}
			//??char*??int????
			int datalen = atoi(chLen);

			//?????????
			index += (sizeof(END1) + strlen(END3));

			//??????????????ÈÉ??????????????????????????
			buf = (char *)malloc(sizeof(char)*datalen);
			//??????????
			buf=cBuffer_Get(pBuf, index+1, datalen);

			//??????????????????????????
			char*timeBuf="";
			time_t timep;
			struct tm *ptime;
			time(&timep);
			ptime = gmtime(&timep);

			//??????????????????¨°??????????
			switch (type)
			{
			case xml:
				if (buf != NULL&&pBuf->size >= datalen)
				{
					//??????????§Ö?¨°?????????????¦Í????????
					cBuffer_Delete(pBuf, index + datalen + sizeof(END2));	

					//????????XML??????????????????
					char *eventBuf = ParsetoXML(buf, datalen);

					//????????????????§Ò???
					if (strcmp(eventBuf,"")!=0)
					{
						//?????????
						char cFilename[512] = { 0 };				
						sprintf(cFilename, "./alarm_file/alarm_%s_%d_%d_%d_%d_%d_%d.txt", eventBuf, ptime->tm_year + 1900, ptime->tm_mon, ptime->tm_mday, ptime->tm_hour, \
							ptime->tm_min,ptime->tm_sec);
						//???ãè??????
						FILE *file;
						if ((file = fopen(cFilename, "w+")) != NULL)
						{
							fwrite(buf, datalen, 1, file);
						}
						else
						{
							//??????????
							printf("file eror\n");
						}
					}
				}
				break;
			case jjson:
				break;
			case img:
				if (buf != NULL&&pBuf->size >= datalen)
				{
					//??????????§Ö?¨°?????????????¦Í????????
					cBuffer_Delete(pBuf, index + datalen + sizeof(END2) + strlen(END3));

					//?????????
					char cFilename[512] = { 0 };				
					sprintf(cFilename, "./alarm_file/alarm_Pic_%d_%d_%d_%d_%d_%d.jpg",ptime->tm_year+1900, ptime->tm_mon, ptime->tm_mday, ptime->tm_hour, \
						ptime->tm_min, ptime->tm_sec);

					//???????????
					FILE *file;
					if ((file = fopen(cFilename, "wb+")) != NULL)
					{
						fwrite(buf, datalen, 1, file);
					}
					else
					{
						//??????????
						printf("file eror\n");
					}
					fclose(file);
							
				}
				break;
			default:
				break;
			}
			
		}		
	}
	return true;
}

//???????????????
bool cBuffer_Init(CBuffer *pBuf)
{
	pBuf->size = 0;
	pBuf->end = 0;
	pBuf->head = NULL;
	pBuf->end = NULL;
	return true;
}

//??????????????????????????char???
void cBuffer_Add(CBuffer *pBuf, char data)
{
	node *buf = (node*)malloc(sizeof(node));
	buf->data = data;
	if (pBuf->head == NULL)
	{
		pBuf->head = buf;
		pBuf->end = buf;
		pBuf->head->next = pBuf->end;
	}
	else
	{
		pBuf->end->next = buf;
		pBuf->end = pBuf->end->next;
	}
	pBuf->size++;
	buf = NULL;
}

//????????§Ý?????????????????????????????????char????
char* cBuffer_Get(CBuffer *pBuf, int start,int length)
{
	if (start+length>pBuf->size)
	{
		return NULL;
	}
	char *Buf = (char*)malloc(sizeof(char)*length);
	memset(Buf, 0, length);
	node *buf = (node*)malloc(sizeof(node));
	buf = pBuf->head;
	while (start!=0)
	{
		buf = buf->next;
		start--;
	}
	for (int i = 0; i < length&&buf!=NULL; i++)
	{
		Buf[i] = buf->data;
		buf = buf->next;
	}
	Buf[length] = '\0';
	buf = NULL;
	return Buf;
}

//??????????????????????????
void cBuffer_Delete(CBuffer *pBuf, int length)
{
	node *head = (node*)malloc(sizeof(node));
	head = pBuf->head;
	while (length != 0)
	{
		node *buf = (node*)malloc(sizeof(node));
		buf = head;
		head = head->next;
		free(buf);
		pBuf->size--;
		length--;	
	}
	if (pBuf->size==0)
	{
		pBuf->head = NULL;
	}
	else
	{
		pBuf->head = head;
	}
	head = NULL;
}

//????????
void cBuffer_Clear(CBuffer *pBuf)
{
	node *head = (node*)malloc(sizeof(node));
	if (pBuf->size != 0)
	{
		head = pBuf->head;
		while (head != NULL)
		{
			node *buf = (node*)malloc(sizeof(node));
			buf = head;
			head = head->next;
			free(buf);
		}
		pBuf->head = NULL;
		pBuf->end = NULL;
	}
	head = NULL;
	free(head);
}
